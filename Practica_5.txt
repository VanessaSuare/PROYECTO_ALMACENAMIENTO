//Nodos y Esquema
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/VanessaSuare/PROYECTO_ALMACENAMIENTO/main/Cliente.csv' 
AS row WITH row WHERE row.idCliente IS NOT NULL MERGE (c:Cliente { idCliente: toInteger(row.idCliente), nombre: row.nombre, edad: toInteger(row.edad), telefono: row.telefono, sexo: row.sexo, tieneTitulo: row.tieneTitulo});

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/VanessaSuare/PROYECTO_ALMACENAMIENTO/main/Direccion.csv' 
AS row WITH row WHERE row.idDireccion IS NOT NULL MERGE (d:Direccion { idDireccion: toInteger(row.idDireccion), ubicacion: row.ubicacion, barrio: row.barrio, codigoPostal: row.codigoPostal});

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/VanessaSuare/PROYECTO_ALMACENAMIENTO/main/Ciudad.csv' 
AS row WITH row WHERE row.idCiudad IS NOT NULL MERGE (:Ciudad { idCiudad: toInteger(row.idCiudad), nombre: row.nombre, pais: row.pais});

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/VanessaSuare/PROYECTO_ALMACENAMIENTO/main/Estudio.csv' 
AS row WITH row WHERE row.idEstudio IS NOT NULL MERGE (:Estudio { idEstudio: toInteger(row.idEstudio), titulo: row.titulo});

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/VanessaSuare/PROYECTO_ALMACENAMIENTO/main/Orden.csv' 
AS row WITH row WHERE row.idOrden IS NOT NULL MERGE (:Orden { idOrden: toInteger(row.idOrden), fechaOrden: date(row.fechaOrden), monto: toInteger(row.monto)});

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/VanessaSuare/PROYECTO_ALMACENAMIENTO/main/Producto.csv' 
AS row WITH row WHERE row.idProducto IS NOT NULL MERGE (:Producto { idProducto: toInteger(row.idProducto), nombre: row.nombre, precio: toInteger(row.precio)});

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/VanessaSuare/PROYECTO_ALMACENAMIENTO/main/Categoria.csv' 
AS row WITH row WHERE row.idCategoria IS NOT NULL MERGE (:Categoria { idCategoria: toInteger(row.idCategoria), nombre: row.nombre});

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/VanessaSuare/PROYECTO_ALMACENAMIENTO/main/Proveedor.csv' 
AS row WITH row WHERE row.idProveedor IS NOT NULL MERGE (:Proveedor { idProveedor: toInteger(row.idProveedor), nombre: row.nombre});

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/VanessaSuare/PROYECTO_ALMACENAMIENTO/main/Aficion.csv' 
AS row WITH row WHERE row.nombre IS NOT NULL AND row.tipo IS NOT NULL MERGE (:Aficion {nombre: row.nombre, tipo: row.tipo});


//Relaciones

MATCH (c:Cliente {idCliente: 1}) MATCH (p:Producto {idProducto: 1}) CREATE (c)-[:HA_VISTO]->(p)

MATCH (c:Cliente {idCliente: 1}) MATCH (o:Orden {idOrden: 1}) CREATE (c)-[:HA_CREADO]->(o)

MATCH (c:Cliente {idCliente: 1}) MATCH (d:Direccion {idDireccion: 1}) CREATE (c)-[:VIVE_EN]->(d)

MATCH (c:Cliente {idCliente: 1}) MATCH (a:Aficion {nombre: 'Fútbol'}) CREATE (c)-[:TIENE_UNA]->(a)

MATCH (c:Cliente {idCliente: 1}) MATCH (e:Estudio {idEstudio: 1}) CREATE (c)-[:TIENE_TITULO]->(e)

MATCH (p:Producto {idProducto: 1}) MATCH (cat:Categoria {idCategoria: 1}) CREATE (p)-[:PERTENECE_A]->(cat)

MATCH (p1:Producto {idProducto: 1}) WITH p1 MATCH (p2:Producto {idProducto: 2}) CREATE (p1)-[:ESTA_RELACIONADO]->(p2)

MATCH (p:Producto {idProducto: 1}) MATCH (pr:Proveedor {idProveedor: 1}) CREATE (p)-[:DISTRIBUIDO_POR]->(pr)

MATCH (d:Direccion {idDireccion: 1}) MATCH (ci:Ciudad {idCiudad: 1}) CREATE (d)-[:UBICADA_EN]->(ci)

MATCH (o:Orden {idOrden: 1}) MATCH (p:Producto {idProducto: 1}) CREATE (o)-[:COMPUESTA_DE]->(p)

MATCH (pr:Proveedor {idProveedor: 1}) MATCH (ci:Ciudad {idCiudad: 1}) CREATE (pr)-[:SE_UBICA_EN]->(ci)

MATCH (c:Cliente {idCliente: 20}) MATCH (p:Producto {idProducto: 1}) CREATE (c)-[:HA_VISTO]->(p)

MATCH (c:Cliente {idCliente: 20}) MATCH (o:Orden {idOrden: 1}) CREATE (c)-[:HA_CREADO]->(o)

MATCH (c:Cliente {idCliente: 20}) MATCH (d:Direccion {idDireccion: 1}) CREATE (c)-[:VIVE_EN]->(d)

MATCH (c:Cliente {idCliente: 20}) MATCH (a:Aficion {nombre: 'Fútbol'}) CREATE (c)-[:TIENE_UNA]->(a)

MATCH (c:Cliente {idCliente: 20}) MATCH (e:Estudio {idEstudio: 1}) CREATE (c)-[:TIENE_TITULO]->(e)

MATCH (c:Cliente {idCliente: 8}) MATCH (p:Producto {idProducto: 1}) CREATE (c)-[:HA_VISTO]->(p)

MATCH (c:Cliente {idCliente: 8}) MATCH (o:Orden {idOrden: 1}) CREATE (c)-[:HA_CREADO]->(o)

MATCH (c:Cliente {idCliente: 8}) MATCH (d:Direccion {idDireccion: 1}) CREATE (c)-[:VIVE_EN]->(d)

MATCH (c:Cliente {idCliente: 8}) MATCH (a:Aficion {nombre: 'Fútbol'}) CREATE (c)-[:TIENE_UNA]->(a)

MATCH (c:Cliente {idCliente: 8}) MATCH (e:Estudio {idEstudio: 1}) CREATE (c)-[:TIENE_TITULO]->(e)

MATCH (p:Producto {idProducto: 1}) MATCH (cat:Categoria {idCategoria: 1}) CREATE (p)-[:PERTENECE_A]->(cat)

MATCH (p1:Producto {idProducto: 1}) WITH p1 MATCH (p2:Producto {idProducto: 2}) CREATE (p1)-[:ESTA_RELACIONADO]->(p2)

MATCH (p:Producto {idProducto: 1}) MATCH (pr:Proveedor {idProveedor: 1}) CREATE (p)-[:DISTRIBUIDO_POR]->(pr)

MATCH (d:Direccion {idDireccion: 1}) MATCH (ci:Ciudad {idCiudad: 1}) CREATE (d)-[:UBICADA_EN]->(ci)

MATCH (o:Orden {idOrden: 1}) MATCH (p:Producto {idProducto: 1}) CREATE (o)-[:COMPUESTA_DE]->(p)

MATCH (pr:Proveedor {idProveedor: 1}) MATCH (ci:Ciudad {idCiudad: 1}) CREATE (pr)-[:SE_UBICA_EN]->(ci)

MATCH (p:Producto {idProducto: 8}) MATCH (cat:Categoria {idCategoria: 2}) CREATE (p)-[:PERTENECE_A]->(cat)

MATCH (p:Producto {idProducto: 8}) MATCH (pr:Proveedor {idProveedor: 14}) CREATE (p)-[:DISTRIBUIDO_POR]->(pr)

MATCH (d:Direccion {idDireccion: 4}) MATCH (ci:Ciudad {idCiudad: 8}) CREATE (d)-[:UBICADA_EN]->(ci)

MATCH (o:Orden {idOrden: 5}) MATCH (p:Producto {idProducto: 8}) CREATE (o)-[:COMPUESTA_DE]->(p)

MATCH (pr:Proveedor {idProveedor: 14}) MATCH (ci:Ciudad {idCiudad: 8}) CREATE (pr)-[:SE_UBICA_EN]->(ci)


// Consultar todas las ordenes creadas por un cliente.

MATCH (c:Cliente {idCliente: 1})-[:HA_CREADO]->(o:Orden)
RETURN o;

// ¿Cuáles son los productos más comprados por un cliente?

MATCH (c:Cliente {idCliente: 1})-[:HA_CREADO]->(o:Orden)-[:COMPUESTA_DE]->(p:Producto)
WITH p, COUNT(o) AS cantidadCompras
RETURN p, cantidadCompras
ORDER BY cantidadCompras DESC;

// ¿Cuáles son los productos más demandados por los clientes de un sexo
(hombre/mujer)? aun no se si funciona

MATCH (c:Cliente)-[:HA_CREADO]->(o:Orden)-[:COMPUESTA_DE]->(p:Producto)
WHERE c.sexo = 'H'  // o 'M' para mujeres
WITH p, COUNT(o) AS cantidadCompras
RETURN p, cantidadCompras
ORDER BY cantidadCompras DESC;

// ¿Cuáles son los principales productos comprados por los clientes que tiene un título
académico? aun no he probado con mas productos

MATCH (c:Cliente {tieneTitulo: true})-[:HA_CREADO]->(o:Orden)-[:COMPUESTA_DE]->(p:Producto)
WITH p, COUNT(o) AS cantidadCompras
RETURN p, cantidadCompras
ORDER BY cantidadCompras DESC;

// Sugerencias

// 5. Sugiere productos a un cliente en base a los productos que ha comprado
MATCH (c:Cliente {idCliente: 1})-[:HA_CREADO]->(o:Orden)-[:COMPUESTA_DE]->(p:Producto)-[:ESTA_RELACIONADO]->(related:Producto)
WHERE NOT (c)-[:HA_CREADO]->()-[:COMPUESTA_DE]->(related)
RETURN DISTINCT related AS SuggestedProducts;

// 6. Sugiere productos a un cliente en base a los productos que ha visto
MATCH (c:Cliente {idCliente: 1})-[:HA_VISTO]->(p:Producto)-[:PERTENECE_A]->(cat:Categoria)<-[:PERTENECE_A]-(suggested:Producto)
WHERE NOT (c)-[:HA_VISTO]->(suggested)
RETURN DISTINCT suggested AS SuggestedProducts;

// 7. Sugiere productos al cliente respecto a los ordenados por sus vecinos
MATCH (c1:Cliente {idCliente: 1})-[:VIVE_EN]->(:Direccion)-[:UBICADA_EN]->(ci:Ciudad)<-[:UBICADA_EN]-(:Direccion)<-[:VIVE_EN]-(c2:Cliente)
MATCH (c2)-[:HA_CREADO]->(o:Orden)-[:COMPUESTA_DE]->(p:Producto)
WHERE NOT (c1)-[:HA_CREADO]->()-[:COMPUESTA_DE]->(p)
RETURN DISTINCT p AS SuggestedProducts;
